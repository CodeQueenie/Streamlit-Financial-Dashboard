"""
Adapter module to provide yahoo_fin-like interface using yfinance as the backend.

Generated by Nicole LeGuern
"""

import yfinance as yf
import pandas as pd
from typing import Dict, Any, Optional, Union

def get_stats_valuation(ticker: str) -> pd.DataFrame:
    """
    Get valuation metrics similar to yahoo_fin's get_stats_valuation
    """
    stock = yf.Ticker(ticker)
    info = stock.info
    
    metrics = {
        'Market Cap (intraday)': info.get('marketCap'),
        'Enterprise Value': info.get('enterpriseValue'),
        'Trailing P/E': info.get('trailingPE'),
        'Forward P/E': info.get('forwardPE'),
        'PEG Ratio (5 yr expected)': info.get('pegRatio'),
        'Price/Sales': info.get('priceToSalesTrailing12Months'),
        'Price/Book': info.get('priceToBook'),
        'Enterprise Value/Revenue': info.get('enterpriseToRevenue'),
        'Enterprise Value/EBITDA': info.get('enterpriseToEbitda')
    }
    
    df = pd.DataFrame(list(metrics.items()), columns=['Attribute', 'Value'])
    df.set_index('Attribute', inplace=True)
    return df

def get_stats(ticker: str) -> pd.DataFrame:
    """
    Get statistics similar to yahoo_fin's get_stats
    """
    stock = yf.Ticker(ticker)
    info = stock.info
    
    # Create categories of statistics similar to yahoo_fin
    stats = {
        'Valuation Measures': {
            'Market Cap': info.get('marketCap'),
            'Enterprise Value': info.get('enterpriseValue'),
            'Trailing P/E': info.get('trailingPE'),
            'Forward P/E': info.get('forwardPE'),
            'PEG Ratio': info.get('pegRatio'),
        },
        'Financial Highlights': {
            'Fiscal Year Ends': info.get('lastFiscalYearEnd'),
            'Most Recent Quarter': info.get('lastQuarter'),
            'Profit Margin': info.get('profitMargins'),
            'Operating Margin': info.get('operatingMargins'),
        },
        'Trading Information': {
            '52-Week Change': info.get('52WeekChange'),
            'Beta': info.get('beta'),
            'Volume': info.get('volume'),
            'Avg Volume': info.get('averageVolume'),
        }
    }
    
    # Convert nested dict to DataFrame
    data = []
    for category, values in stats.items():
        for key, value in values.items():
            data.append([key, value])
            
    df = pd.DataFrame(data, columns=['Attribute', 'Value'])
    df.set_index('Attribute', inplace=True)
    return df

def get_income_statement(ticker: str, yearly: bool = True) -> pd.DataFrame:
    """
    Get income statement similar to yahoo_fin's get_income_statement
    """
    stock = yf.Ticker(ticker)
    if yearly:
        return stock.financials
    return stock.quarterly_financials

def get_balance_sheet(ticker: str, yearly: bool = True) -> pd.DataFrame:
    """
    Get balance sheet similar to yahoo_fin's get_balance_sheet
    """
    stock = yf.Ticker(ticker)
    if yearly:
        return stock.balance_sheet
    return stock.quarterly_balance_sheet

def get_cash_flow(ticker: str, yearly: bool = True) -> pd.DataFrame:
    """
    Get cash flow statement similar to yahoo_fin's get_cash_flow
    """
    stock = yf.Ticker(ticker)
    if yearly:
        return stock.cashflow
    return stock.quarterly_cashflow

def get_analysts_info(ticker: str) -> Dict[str, pd.DataFrame]:
    """
    Get analyst information similar to yahoo_fin's get_analysts_info
    """
    stock = yf.Ticker(ticker)
    
    # Get recommendations and earnings
    recommendations = stock.recommendations
    earnings = stock.earnings
    
    return {
        'Earnings Estimate': earnings if earnings is not None else pd.DataFrame(),
        'Revenue Estimate': pd.DataFrame(),  # Not directly available in yfinance
        'Earnings History': earnings if earnings is not None else pd.DataFrame(),
        'EPS Trend': pd.DataFrame(),  # Not directly available in yfinance
        'EPS Revisions': pd.DataFrame(),  # Not directly available in yfinance
        'Growth Estimates': pd.DataFrame(),  # Not directly available in yfinance
    }

# Additional helper functions as needed
def get_live_price(ticker: str) -> float:
    """Get current price for a ticker"""
    stock = yf.Ticker(ticker)
    return stock.info.get('regularMarketPrice', 0.0)
